	Blackwell's Attention Investment model discusses and evaluates the use of software in terms of its likeness to programming tasks, any loss of direct manipulation that the software enforces, any special language or notation that the user must learn, and any abstractions that the software layers over the actual task at hand. This paper will apply these considerations to the Media Plan Manager, and the user that it was designed for.
	To motivate the use of this of this model, recall that the Attention Investment paper mentions that even relatively simple end-user tasks "requirements gathering, specifications, design, coding, and debugging". All of these elements are present in the use cases we are considering. To build a media plan, Sanchit's consumer ("the consumer") must first gather requirements and specifications from her client over the phone. Before the consumer can input the data into a spreadsheet, she must then design some fields that hold all of this information, by deciding on a set of row and column headers that are relevant to the given information. Coding takes the form of providing Excel formulas in her spreadsheet that compute functions on auxiliary data that is already contained in the consumers related worksheets. Finally, the consumer frequently makes mistakes when she writes these formulas, which forces her to go through a debugging step.
	One of the methods used in Attention Investment to evaluate a software or programming design is the loss of direct manipulation that the system enforces on the user. Loss of direct manipulation contributes to what is known as the "frame problem". As the loss of direct manipulation decreases, and the amount of abstraction in the system increases, users are less sure that actions that they take will not have unintended consequences or side-effects.
	There is a high degree of direct manipulation in the consumer's current process, because the consumer must create a new spreadsheet for each new media plan. Although the consumer can copy-paste information from pre-existing and similar spreadsheets, or treat similar spreadsheets as "templates" for any new spreadsheet, she is forced to look at these templates and verify in a more direct way that the fields of the template spreadsheet are comparable to the fields of the new spreadsheet that she is making. By constrast, the Media Plan Manager introduces a high degree of abstraction and creates a large loss of direct manipulation. Instead of a more direct method of copy-pasting previous templates row-by-row and column-by-column, the consumer can load an already existing template from a template folder. In another use-case, the consumer can create a new media plan by selecting the field types that she needs from a list of recently or previously used field types from other spreadsheets.
	Given all this, not using the Media Plan Manager fits what is called a low-risk and low-payoff strategy in the Attention Investment model to create a media plan. It is low-risk, because she understands all of the direct side-effects of the more granular actions she has to take. It is low-reward, because it is more time-consuming and requires a large number of attentional units. For the use cases above, using the Media Plan Manager is a high-risk and high-payoff strategy. It is high-risk because she has less of an opportunity to tailor and customize fields. It is high-reward, because if it works correctly it requires fewer attentional units. Although it is a plausible hypothesis that the Media Plan Manager will reduce the average amount of attention investment required to create a media plan, it is difficult to make such a claim without studying the consumer as she creates media plans through her current methodology, and as she creates media plans with the Media Plan Manager.
	There is another use case that should be considered. The consumer's current methodology can create buggy spreadsheets caused by incorrect formulas that compute functions on values drawn from already existing worksheets. If the consumer uses the Media Plan Manager, she has a systematic way of validating the formulas in her media plans, by checking off formulas as they are validated. In this use case, the Media Plan Manager decreases the risk of creating a spreadsheet that will have to be painstakingly debugged, and as with other types of programming this debugging step can require a huge number of attentional units. There is a slight investment of attentional units required to check off verified formulas and monitor the check-boxes to and decide which formulas have or have not been validated. However, if the probability that this type of error will occur in a media plan is high, it is safe to assume that using the Media Plan Manager will on the average decrease the amount of attentional units required to create a media plan.
	Finally, there is one more use case to consider. The consumer is required to merge various media plans into a single spreadsheet. The Media Plan Manager offers functionality to automate this difficult and time-consuming process. Although the details of both the manual and automated merging process are somewhat unclear to this author, my previous experience with code-merging algorithms in version control systems leads me to be extremely suspicious of any merging algorithm. Automating the merging process tends to introduce a very high degree of risk. Of course, more information, and probably user study, is required to determine whether the Media Plan Manager will be more helpful than harmful for this use case.
	This paper has shown that the Attention Investment model is well motived to analyze this consumer's work and the potential of the Media Plan Manager to help her. It has been shown creating media plans from templates increases both the risk and the payoff in attentional units. Also, the Media Plan Manager is likely to decrease the risk associated with debugging formulas used in media plans. Finally, automating the media plan merging process is likely to very dramatically increase both the risk and payoff in attentional units.
